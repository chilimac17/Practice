Challenges


1.  What happens if the file mode creation mask is set to 777 (octal)?  Verify the results using the umask command.

    a. create file:                 date > bbb.txt
    b. check permissions:           ls -l bbb.txt
    c. now try to remove the file:  rm bbb.txt





2.  Verify that turning off user-read permission for a file that you own denies your access to the file.






3.  Type in the code found in Figure 4.9 on page 104 in the textbook. (shown below)

#include "apue.h"
#include <fcntl.h>

#define RWRWRW (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)

int main() {
	umask(0);
	if (creat("foo", RWRWRW) < 0)
		err_sys("creat error for foo");
	umask(S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);
	if (creat("bar", RWRWRW) < 0)
		err_sys("creat error for bar");
	exit(0);
}

	a.  Run this code.  Are there any errors?  Verify the files foo and bar have been created.
	b.  Run the code again.  Are there any errors?  Why?






4.  What does the following program do?  What file modes and permissions are being used?

Create a file named "file.in" with a few sentences in the current directory.

#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>

int main() {
	char c;
	int in, out;

	in = open("file.in", O_RDONLY);
	out = open("file.out", O_WRONLY | O_CREAT, S_IRUSR|S_IWUSR);

	while(read(in, &c, 1) == 1) {
		write(out, &c,1);
	}
	exit(0);
}

b. What is found in the file "file.out"?
c. What permissions are set?




5.  Create a program with the following sequence of commands:

if (mkdir("/tmp/foo", DIR_PERM) < 0)
	err_sys("mkdir failed");
if (chdir("/tmp/foo") < 0)
	err_sys("chdir failed");
if (rmdir("/tmp/foo") < 0)
	err_sys("rmdir failed");

Does the program succeed?  What happens if the program attempts to read the current directory?